<?php

/**
 * @file
 * Reset user passwords and optionally notify users.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
//@todo fix route_match
function mass_pwreset_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'mass_pwreset.admin':
      return '<p><strong>' . t('Use this form with caution.') . '</strong></p><p>' . t('This form will reset the passwords of all users except the administrative superuser id 1. You can optionally reset the administrative superuser id 1.') . '</p><p>' . t('Once passwords have been reset, users will optionally receive emails using the Drupal password recovery email.') . '</p>';
  }
}

/**
 * Establish batch operation for resetting passwords.
 */
function mass_pwreset_multiple_reset($data) {
  $batch = array(
    'operations' => array(
      array('mass_pwreset_batch_process', array($data)),
    ),
    'finished' => 'mass_pwreset_batch_finished',
    'title' => t('Multiple password reset'),
    'init_message' => t('Multiple password reset in progress.'),
    'progress_message' => t('Password reset batch in progress.'),
    'error_message' => t('There was an error in the password reset batch.'),
    'file' => drupal_get_path('module', 'mass_pwreset') . '/mass_pwreset.batch.inc',
  );
  // Set batch via form submit handler.
  batch_set($batch);
}

/**
 * Return uids from a list of roles, excluding uid 1.
 */
function mass_pwreset_get_uids_by_selected_roles($roles = array()) {
  $db = \Drupal::database();
  $query = $db->select('users', 'u');
  $query->innerJoin('user__roles', 'ur', 'u.uid = ur.entity_id');
  $query->fields('u', array('uid'));
  $query->condition('ur.roles_target_id', $roles, 'IN');
  $query->condition('u.uid', '1', '!=');
  $query->orderBy('u.uid');
  $query->distinct();
  return $query->execute()->fetchCol();
}

/**
 * Return uids for all user accounts, excluding uid 0 and 1.
 */
function mass_pwreset_get_uids() {
  $db = \Drupal::database();
  $query = $db->select('users', 'u');
  $query->fields('u', array('uid'));
  $query->condition('u.uid', array(0, 1), 'NOT IN');
  $query->orderBy('u.uid');
  $query->distinct();
  return $query->execute()->fetchCol();
}

/**
 * Remove anonymous and authenticated and return a list of roles.
 */
function mass_pwreset_get_custom_roles() {
  $roles = user_role_names(TRUE);
  unset($roles['authenticated']);
  return $roles;
}

/**
 * Generate user passwords.
 *
 * Modified version of Drupal's user_password() to include special characters.
 *
 * @param int $password_length
 *   Length of password.
 *
 * @return string
 *   Generated password
 */
function _mass_pwreset_generate_password($password_length = 20) {

  // Regex to enforce the password requirements.
  // First and last characters cannot be digits (0-9).
  // Must contain two digit characters (0-9).
  // Must contain one lower case character (a-z).
  // Must contain one upper case character (A-Z).
  // Must contain three special characters
  // ( ()`~!@#$%^&*-+=|\{}[]:;"'<>,.?/ ).
  // Minimum length is 12 characters.
  // Maximum length is 128 characters.
  $password_requirements = '_^(?=.*\d.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[()`~!@#$%^\&*\-+=\|\\{}[\]:;"\'<>,.?/].*[()`~!@#$%^\&*\-+=\|\\{}[\]:;"\'<>,.?/].*[()`~!@#$%^\&*\-+=\|\\{}[\]:;"\'<>,.?/])[\D]{1}[\s0-9a-zA-Z()`~!@#$%^\&*\-+=\|\\{}[\]:;"\'<>,.?/]{10,126}[\D]{1}$_';

  // List of allowable characters for the password.
  $allowable_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ0123456789()`~!@#$%^&*-+=|\{}[]:;"\'<>,.?/';

  // Zero-based count of characters in the allowable list.
  $characters_length = Drupal\Component\Utility\Unicode::strlen($allowable_characters) -1;

  $new_password = '';
  // Generate passwords until password requirements are met.
  while (preg_match($password_requirements, $new_password) == 0) {
    for ($i = 0; $i < $password_length; $i++) {
      $new_password .= $allowable_characters[mt_rand(0, $characters_length)];
    }
  }
  return $new_password;
}
